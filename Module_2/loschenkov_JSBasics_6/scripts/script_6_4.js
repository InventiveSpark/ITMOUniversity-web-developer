/* Функция setElementStyle() получает на вход имя элемента, а также цвет 
   и размер шрифта, которые она устанавливает в качестве стилевых свойств 
   данного элемента. */
function setElementStyle(element, fontColor, fontSize) {
    /* Объект style предоставляет доступ к каскадным таблицам стилей (CSS). 
       Названия свойства этого объекта соответствуют атрибутам в CSS 
       с небольшими отличиями, но удаляются символы "-", при этом первые буквы
       всех слов в названии атрибута, кроме первого, делаются прописными. 
       Например: 
       * color = color;
       * font-size = fontSize. 
       
       Для заданного элемента устанавливаются стилевые свойства: */
    element.style.color = fontColor;
    element.style.fontSize = fontSize;
}


/* Функция setStyle() получив цвет и размер шрифта, устанавливает 
   соответствующие стилевые свойства для всех элементов разметки (в данном 
   случае - элементов списка <li>), являющихся дочерними по отношению 
   к родительским элементам с классом "listNumbers" (в данном случае 
   - неупорядоченному списку <ul>).
   В функции представлено два варианта отделения элементов разметки от 
   текстовых узлов. */
function setStyle(fontColor, fontSize) {
    /* Для того, чтобы получить доступ к тегу ul, производится обращение 
       к значению его класса "listNumbers".
       DOM-метод getElementsByClassName() используется для получения элементов
       по имени класса. Возвращает массивоподобный (итерируемый) объект всех 
       дочерних элементов, принадлежащих классу (так как один класс может 
       содержать множество элементов). 
       В случае вызова по отношению к объекту "document", поиск происходит 
       по всему документу, включая корневой элемент. 
       Вызывать getElementsByClassName() можно также применительно к любому 
       элементу: возвращены будут лишь те элементы, которые являются потомками
       указанного корневого элемента и имеют при этом заданные классы. 
       Метод возвращает объект HTMLCollection (коллекцию), который является 
       массивоподобным объектом, доступным только для чтения. У него есть 
       свойство length. Кроме того, его можно индексировать (но только для 
       чтения, а не для записи), как настоящий массив.
       Объявление константы, ссылающейся на коллекцию элементов (компонентов 
       формы), принадлежащих классу "listNumbers": */
    const PARENTS = document.getElementsByClassName("listNumbers");

    // Для каждого из элементов, принадлежащих классу "listNumbers",
    for (let parent of PARENTS) { // Можно использовать также for (let i = 0; i < PARENTS.length; i++) {...PARENTS[i]...}
        /* нужно получить список дочерних элементов разметки, таких как <li>, 
           <а>, <р> и <body>. Это можно сделать двумя способами: */

        console.log("СПОСОБ 1");
        /* СПОСОБ 1. Получить список дочерних узлов с помощью метода 
                     childNodes() и исключить из него текстовые узлы: */
        let childrens = parent.childNodes;
        /* Узел является общим блоком в DОМ-представлении документа. Элементы, 
           атрибуты, комментарии, документы и текстовые узлы - все они являются 
           узлами, и поэтому у них имеются типичные для узлов свойства. 
           Например, свойства nodeType, nodeName и nodeValue имеются у каждого 
           узла.
           Каждый объект узла DOM имеет доступное только для чтения свойство 
           nodeType, которое содержит код (беззнаковое короткое целочисленное
           значение), идентифицирующий тип узла:
           * Узел Document имеет код 9, также определенный как константное 
             свойство Node.DOCUMENT_NODE.
           * Комментарии имеют код 8 (Node.COMMENT_NODE).
           * Элементы имеют код 1 (Node.ELEMENT_NODE). Это большинство элементов
             разметки в файле. Например, элементы разметки <li>, <а>, <р> 
             и <body> имеют значение 1 своего свойства nodeType.
           * Текстовые узлы, представляющие фрагмент текста в документе, 
             имеют код 3 (Node.TEXT_NODE).
           В данном случае, узлы элементов соответствуют элементам <li>, 
           а текстовые узлы - это переносы на новую строку после элементов <li>
           и отступы в виде пробелов.
           Итак, элементы и текстовые узлы принадлежат childNodes. Исключить 
           текстовые узлы и выбрать только узлы элементов, можно по значению 
           свойства nodeType:
           Для каждого из дочерних узлов,                                    */
        childrens.forEach(childNode => {
            if (childNode.nodeType === Node.ELEMENT_NODE) // являющегося элемен­том разметки,
                setElementStyle(childNode, fontColor, fontSize) // устанавливаются стилевые свойства.
            console.log("Обработка дочернего узла.", (childNode.tagName !== undefined) ?
                childNode.tagName + " " + childNode.textContent : "\"" + childNode.textContent + "\"");
        });

        console.log("СПОСОБ 2");
        /* СПОСОБ 2. Получить коллекцию дочерних элементов сразу с помощью метода
                     children(). Для того, чтобы игнорировать текстовые узлы, 
                     вместо метода childNodes() можно использовать children().
                     Метод возвращает объект HTMLCollection (коллекцию): */
        let childElements = parent.children;
        // Для каждого из дочерних элементов разметки
        for (let child of childElements) { // Можно использовать также for (let j = 0; j < childElements.length; j++) {...childElements[j]...}
            // устанавливаются стилевые свойства
            setElementStyle(child, fontColor, fontSize)
            console.log("Обработка элемента из коллекции.",
                child.tagName + " " + child.textContent);
        }
    }
}


setStyle("blue", "2.5rem");