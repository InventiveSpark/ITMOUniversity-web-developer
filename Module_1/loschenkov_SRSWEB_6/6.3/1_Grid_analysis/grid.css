/* Сетка - это специальный инструмент для организации объектов в пространстве.
   Она позволяет размещать объекты в системно определенном горизонтальном ритме,
   что облегчает не только считывание и восприятие информации, но и разработку 
   дизайна и верстку.
   Здесь представлена сетка из 12 колонок, адаптирующаяся под ширину области 
   просмотра экранных устройств благодаря применению медиа-запросов. Сетка на 12 
   колонок используется чаще потому, что число 12 делится на: 12, 6, 4, 3, 2, 1,
   делая сетку гибкой, позволяя органично вписывать в нее блоки практически 
   любого количества или ширины.
   Готовую сетку легко подключить, т.к. она представляет собой файл со стилями, 
   в котором находится набор CSS классов. Легко верстать такую сетку по готовому 
   макету, выполненному по сетке. Для этого нужно соблюдать принятую структуру 
   блоков и задавать им параметры через указание соответствующих классов. При
   верстке ориентируются не на фактическую ширину блока (модуля), а на количество
   колонок сетки, которое он занимает.
   Сетка упрощает создание адаптивных версий дизайна для экранов разных устройств 
   таких, как мониторы (декстоп), планшеты и смартфоны. Благодаря адаптивному дизайну 
   обеспечивается корректное отображение сайта на этих устройствах с разным 
   разрешением. Параметры сетки (количество колонок и ширина контейнера) будут
   меняться при сжатии страницы по горизонтали. Визуально это выглядит так, что блоки 
   меняются местами и занимают разное количество колонок. При необходимости 
   (путем редактирования CSS стилей) можно изменять и другие параметры, например,
   ширину промежутков между колонками, которую можно задать нулевой, если задумывается 
   плиточный дизайн.
   Ширина сетки задается контейнером container. В данном случае она может быть 
   как неограниченной для небольших экранов (100%), так и ограниченной для экранов 
   побольше. В зависимости от разрешения экрана, количество колонок (блоков, 
   отображаемых в одной строке) может меняться - чем меньше ширина экрана, тем 
   меньше колонок, чтобы было удобнее пользоваться.
   Строки (блоки с классом row) находятся внутри контейнера. Внутри строк находятся
   ячейки или модули (блоки с классом col). Каждый модуль является основой для 
   вложения в него контента (текста, изображений и элементов интерфейса). Внутри 
   модуля, размещенного по сетке, могут располагаться другие блоки (например, пункты 
   меню), которые не будут индивидуально выровнены по ней, но выровнен будет модуль,
   внутри которого они находятся.
   Ширина колонки - величина относительная и задается в процентах. Межколоночный 
   интервал (ширина промежутков между содержимым соседних колонок gutter = 30px) 
   устанавливается указанием ширины отступов внутри модуля (15px) - величиной
   абсолютной, заданной в пикселях. Промежутки между колонками всегда одинаковой 
   ширины. Горизонтальные колонки регулируют отступы между модулями.
   Высота колонки формируется в зависимости от ее содержимого, однако вертикальные 
   отступы можно регулировать с помощью горизонтальных модулей во всю ширину сетки.
   Количество модулей (блоков) в строке можно задать любое в диапазоне от 1 до 12. 
   Для того, чтобы строки не содержали пустых мест и были полностью заполнены, 
   суммарная ширина модулей в строке должна составлять 12 колонок. Например, это 
   может быть один модуль шириной в 12 колонок, или могут быть три модуля шириной 
   в 1, 8 и 3 колонки, или 12 модулей шириной в одну колонку каждый. Количество 
   колонок в модуле (класс col), задающее ширину блока, - величина произвольная. 
   Она может быть разной для разных разрешений и задаваться в нескольких вариантах 
   (в зависимости от ширины экрана) путем указания дополнительных классов, которые 
   при достижении контрольных точек (в заранее указанных значениях размера экрана)
   будут переопределять ширину модуля. Предусмотрено 4 набора по 12 классов для 4 
   диапазонов ширины экрана.  
   Такая адаптивная сетка позволяет гибко подходить к размещению элементов на 
   странице и тоньше настраивать положение блоков внутри нее, избавляя от
   необходимости ориентироваться только на конкретные размеры каждого блока в 
   макете, что усложняет верстку и делает ее ненадежной в адаптивном режиме.
   Кроме того, можно оперативно выяснить с дизайнером, сколько колонок на каком
   разрешении должен занимать тот или иной блок (модуль), т.е. без правок в макете 
   можно быстро решить многие вопросы. Стили сетки не дублируются в блоках, 
   а написаны один раз отдельно. Так сокращается объем кода, код логически разделен 
   и в него легче вносить изменения.
   При размещении элементов контента по колонкам модульной сетки важно, чтобы все 
   элементы были привязаны к правому или к левому краю колонки сетки, или выровнены 
   посередине, в зависимости от задуманного дизайна. В данном случае включено
   обтекание, при котором модули прижимаются к левому краю сетки.
   */

/* Для всех элементов: */
* {
    /* Внутренние и внешние отступы будут «съедать» внутренние размеры блоков,
       а не наоборот: */
    box-sizing: border-box;
    /* Задание гарнитуры шрифта без засечек: */
    font-family: sans-serif;
}

html, body {
    /* Сброс внешних и внутренних отступов для тегов html и body позволяет 
       отрисовывать страницу от самого края области просмотра браузера: */
    margin: 0;
    padding: 0;
}

/* Класс, задающий горизонтальное выравнивание текста (или строчных элементов): */
.alignCenter {
    text-align: center;
}

/* Общие стили для всех модулей вне зависимости от их размеров: */
.col {
    /* Включение обтекания блока, при котором блок прижимается к левому краю.
       Это позволяет блокам модулей, находящимся внутри блока с классом row,
       располагаться по горизонтали в одну строку последовательно друг за другом,
       начиная от левого края строки: */
    float: left;
    /* Фоновый цвет: */
    background-color: #efefef;
    /* Внутренние отступы задают промежуток между содержимым соседних колонок, или
       межколоночный интервал (gutter) 15px*2 = 30px (отступы складываются): */
    padding-left: 15px;
    padding-right: 15px;
}

/* Для того, чтобы плавающие элементы (модули) не выпадали из родителя 
   - строки), используется прием «псевдораспорка»: контейнеру row, 
   содержащему флоаты, добавляется псевдоэлемент с clear:both. Этот
   псевдоэлемент расположен после плавающих: */
.row:after {
    content: " ";
    display: table;
    /* Отмена обтекания элемента одновременно с правого и левого края: */
    clear: both;
}

/* Строки находятся внутри контейнера. Внутри строк находятся модули. Колонки,
   находящиеся в одной строке, оборачиваются в блок с классом row. Для того,
   чтобы следующий модуль всегда размещался с новой строки, нужно включить его
   внутрь нового блока с классом row. */
.row {
    /* Отрицательные внешние отступы слева и справа для строки заданы для того, 
       чтобы компенсировать отступы внутри контейнера (сохранив при этом отступы
       между содержимым соседних колонок в строке): */
    margin-left: -15px;
    margin-right: -15px;
}

/* Контейнер содержит в себе строки (блоки с классом row) и ограничивает сетку 
   по ширине. Общие стили для контейнера: */
.container {
    /* Выравнивание по центру для того, чтобы контейнер располагался по середине 
       страницы и не прилипал ни к какому краю, а также обнуление отступов сверху 
       и снизу для того, чтобы сетка начинала формироваться от верхнего края
       области просмотра браузера и свободно могла доходить до нижнего края: */
    margin: 0 auto;
    /* Отступы внутри контейнера слева и справа нужны для того, чтобы элементы 
       не прилипали к краю экрана. */
    padding-left: 15px;
    padding-right: 15px;
    /* Ширина контейнера будет задаваться далее в медиа-запросах для экранных 
       устройств с различной шириной области просмотра. */
}

/* Перечисление всех возможных вариантов модулей в 12-колоночной сетке вне 
   зависимости от размера экрана.
   Имя модуля формируется из двух составляющих:
       col - сокращение от column (колонка);
       число после дефиса - размер этого модуля (сколько колонок по ширине 
       должен занимать блок с таким классом). 
   Высота колонки формируется в зависимости от ее содержимого.
   Поскольку колонки имеют относительную ширину, то при сжатии страницы по 
   горизонтали менее чем на 768px, колонки уменьшаются, оставляя 
   постоянный промежуток между содержимым соседних колонок или межколоночный
   интервал (gutter). Т.е. сетка (контейнер) занимает все свободное 
   пространство.
   Для больших значений ширины экрана задано ограничение сетки по ширине,
   и ширина колонок, как и вся сетка, изменяется ступенчато.
   Промежуток между содержимым соседних колонок остается постоянным для 
   любой ширины экрана. */
/* Блок с таким классом занимает всю ширину экрана (12 колонок): */
.col-12 {
    width: 100%;
}
.col-11 {
    width: 91.66666667%;
}
.col-10 {
    width: 83.33333333%;
}
.col-9 {
    width: 75%;
}
.col-8 {
    width: 66.66666667%;
}
.col-7 {
    width: 58.33333333%;
}
/* Блок с таким классом занимает половину ширины экрана (6 колонок): */
.col-6 {
    width: 50%;
}
.col-5 {
    width: 41.66666667%;
}
.col-4 {
    width: 33.33333333%;
}
.col-3 {
    width: 25%;
}
.col-2 {
    width: 16.66666667%;
}
.col-1 {
    width: 8.33333333%;
}

/* Примечание:
   Представленные ниже медиа-запросы срабатывают только для экранных устройств. 
   Если добавить тип устройства print, то медиа-запросы будут также управлять 
   выводом страницы на устройство «Принтер».
   Если же удалить тип устройства screen, то медиа-запросы будут адаптировать 
   страницу для всех возможных типов устройств.

   Каскадное применение стилей в зависимости от ширины экрана. Стили задаются
   посредством медиа-запросов через минимальную ширину области просмотра экранных
   устройств, начиная от маленьких экранов и заканчивая большими.
   Для каждого разрешения (значения ширины) экрана:
   1. Задается ширина контейнера, который ограничивает сетку по ширине;
   2. Снова перечисляются все возможные варианты модулей в 12-колоночной сетке.
      Однако для модулей применяются новые имена классов. К приведенной выше схеме 
      формирования имен модулей добавляется третий параметр в середине:
          sm - для узких экранов от 768px до 991px (смартфон или планшет); 
          md - для экранов средней ширины от 992px до 1999px (ноутбук);
          lg - для больших экранов шириной более 1200px (настольные компьютеры).
      Эти значения задают три breakpoin'а - контрольные точки, в которых меняется 
      поведение сетки. Контрольная точка в CSS определяется, когда она засекает 
      определенные размеры экрана. Когда размер экрана доходит до определенной 
      контрольной точки, отображается содержимое, соответствующее именно этому размеру 
      экрана. Например, в десктопном браузере достаточно места для отображения широких
      и крупных элементов, однако, на мобильном устройстве следует спланировать: что
      абсолютно необходимо показать, а что стоит перенести ниже на другую строку или
      уменьшить в размере. */
@media screen and (min-width: 768px) {
    .container {
        width: 750px;
    }
    .col-sm-12 {
        width: 100%;
    }
    .col-sm-11 {
        width: 91.66666667%;
    }
    .col-sm-10 {
        width: 83.33333333%;
    }
    .col-sm-9 {
        width: 75%;
    }
    .col-sm-8 {
        width: 66.66666667%;
    }
    .col-sm-7 {
        width: 58.33333333%;
    }
    .col-sm-6 {
        width: 50%;
    }
    .col-sm-5 {
        width: 41.66666667%;
    }
    .col-sm-4 {
        width: 33.33333333%;
    }
    .col-sm-3 {
        width: 25%;
    }
    .col-sm-2 {
        width: 16.66666667%;
    }
    .col-sm-1 {
        width: 8.33333333%;
    }
}

@media screen and (min-width: 992px) {
    .container {
        width: 970px;
    }
    .col-md-12 {
        width: 100%;
    }
    .col-md-11 {
        width: 91.66666667%;
    }
    .col-md-10 {
        width: 83.33333333%;
    }
    .col-md-9 {
        width: 75%;
    }
    .col-md-8 {
        width: 66.66666667%;
    }
    .col-md-7 {
        width: 58.33333333%;
    }
    .col-md-6 {
        width: 50%;
    }
    .col-md-5 {
        width: 41.66666667%;
    }
    .col-md-4 {
        width: 33.33333333%;
    }
    .col-md-3 {
        width: 25%;
    }
    .col-md-2 {
        width: 16.66666667%;
    }
    .col-md-1 {
        width: 8.33333333%;
    }
}

@media screen and (min-width: 1200px) {
    /* На максимальных разрешениях контейнер ограничивает сетку по ширине 
       в 1170px. Это - максимальная ширина сетки. */
    .container {
        width: 1170px;
    }
    .col-lg-12 {
        width: 100%;
    }
    .col-lg-11 {
        width: 91.66666667%;
    }
    .col-lg-10 {
        width: 83.33333333%;
    }
    .col-lg-9 {
        width: 75%;
    }
    .col-lg-8 {
        width: 66.66666667%;
    }
    .col-lg-7 {
        width: 58.33333333%;
    }
    .col-lg-6 {
        width: 50%;
    }
    .col-lg-5 {
        width: 41.66666667%;
    }
    .col-lg-4 {
        width: 33.33333333%;
    }
    .col-lg-3 {
        width: 25%;
    }
    .col-lg-2 {
        width: 16.66666667%;
    }
    .col-lg-1 {
        width: 8.33333333%;
    }
}
