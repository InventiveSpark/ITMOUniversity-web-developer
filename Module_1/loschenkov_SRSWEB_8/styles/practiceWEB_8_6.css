/* Для всех элементов: */
* {
    /* Сброс внутренних и внешних отступов: */
    padding: 0;
    margin: 0;
}

.wrap {
    /* Ширина элемента: */
    width: 200px;
    /* Высота элемента: */
    height: 150px;
    /* Толщина, стиль (цельный) и цвет внешней границы: */
    outline: 1px solid #000;
    /* Тип элемента - блочно-строчный. Его внутренняя часть форматируется 
       как блочный элемент, а сам элемент - как строчный: */
    display: inline-block;
    /* Внешние отступы: */
    margin: 35px 50px;
}

/* Элемент div, являющийся дочерним непосредственно по отношению к элементу 
   с классом wrap: */
.wrap>div {
    /* Ширина элемента: */
    width: 200px;
    /* Высота элемента: */
    height: 150px;
    /* Полупрозрачный фоновый цвет: */
    background: rgba(144, 235, 242, 0.5);
    /* Тип элемента - блочно-строчный. Его внутренняя часть форматируется 
       как блочный элемент, а сам элемент - как строчный: */        
    display: inline-block;
    /* Позиционирование блока устанавливается относительно 
       его исходного места: */
    position: relative;
    /* Расположение элемента по оси z. В случае перекрытия элементов, это значение 
       определяет порядок наложения. В данном случае элемент располагается выше 
       всех остальных, т.е. всегда виден пользователю. Это свойство работает только 
       для элементов, у которых значение position задано как absolute, fixed или 
       relative. */
    z-index: 2;
    /* Название CSS-свойства, к которому будет применен эффект перехода и промежуток 
       времени, в течение которого должен осуществляться переход, т.е. время, 
       за которое одно значение свойства переходит (анимируется) в другое.
       В данном случае это свойство transform, которое позволяют перемещать, вращать, 
       масштабировать и искажать элементы: */
    transition: transform 1s;
}

/* Элемент span, являющийся дочерним непосредственно по отношению к элементу div, 
   который, в свою очередь, является дочерним непосредственно по отношению к элементу 
   с классом wrap: */
.wrap>div>span {
    /* Абсолютное позиционирование блока:
       1. Элемент выпадает из потока. Другие элементы отображаются на веб-странице 
          словно абсолютно позиционированного элемента и нет.
       2. Сжимается под содержимое.
       3. Участвует в «наслаивании».
       4. Гибкая модель позиционирования. Положение элемента задается свойствами 
          left, top, right и bottom.
       5. Свойства задания координат ведут себя по-другому. На положение влияет 
          значение свойства position родительского элемента. Так, если у родителя 
          значение position установлено как static или родителя нет, то отсчет 
          координат ведется от края окна браузера. Если у родителя значение 
          position задано как fixed, relative или absolute, то отсчет координат 
          ведется от края родительского элемента. */
    position: absolute;
    /* Положение элемента. Поскольку у родителя div значение position задано как 
       relative, то отсчет координаты ведется от верхнего края родительского 
       элемента до верхнего края дочернего элемента, а проценты берутся от высоты 
       родительского блока: */
    top: 45%;
    /* Элемент занимает всю ширину родительского элемента: */
    width: 100%;
    /* Горизонтальное выравнивание текста (или строчных элементов): */
    text-align: center;
}

/* Трансформации, заданные ниже, будут производиться при наведении курсора мыши 
   на соответствующие элементы: */

/* Элемент с классом translateX, над которым проходит указатель мыши: */
.translateX:hover {
    /* Трансформация - сдвиг элемента по горизонтали на 50 пикселей вправо: */
    transform: translateX(50px);
}

.translateY:hover {
    /* Трансформация - cдвиг элемента по вертикали на 50 пикселей вниз: */
    transform: translateY(50px);
}

.translate:hover {
    /* Трансформация - сдвиг элемента на 50 пикселей вправо и на 50 пикселей 
       вниз: */ 
    transform: translate(50px, 50px);
}

.scaleX:hover {
    /* Трансформация - масштабирование по горизонтали зеркально отражает 
       элемент по горизонтали: */
    transform: scaleX(-1);
}

.scaleY:hover {
    /* Трансформация - масштабирование по вертикали зеркально отражает 
       элемент по вертикали: */
    transform: scaleY(-1);
}

.scaleX15:hover {
    /* Трансформация - масштабирование по горизонтали расширяет элемент 
       в 1.5 раза: */
    transform: scaleX(1.5);
}

.scale:hover {
    /* Трансформация - масштабирование по горизонтали и вертикали:
       1. масштабирование по горизонтали расширяет элемент в 1.5 раза;
       3. масштабирование по вертикали сужает элемент в 2 раза. */
    transform: scale(1.5, 0.5);
}

.rotate:hover {
    /* Трансформация - поворот элемента по часовой стрелке на угол 360 градусов
       относительно точки трансформации, задаваемой свойством transform-origin, 
       по умолчанию располагающейся в центре элемента: */
    transform: rotate(360deg);
}

.skewX:hover {
    /* Трансформация - деформация (наклон) элемента на 45 градусов 
       по горизонтали: */
    transform: skewX(45deg);
}

.skewY:hover {
    /* Трансформация - деформация (наклон) элемента на -45 градусов 
       по вертикали: */
    transform: skewY(-45deg);
}

.skew:hover {
    /* Трансформация - деформация (наклон) элемента на -20 градусов 
       по горизонтали и на 20 градусов по вертикали: */ 
    transform: skew(-20deg, 20deg);
}

.matrix:hover {
    /* Трансформация задаётся посредством матрицы преобразований,
       объединяющей несколько функций 2D-трансформаций в одной:
       1. масштабирование по горизонтали расширяет элемент в 1.5 раза;
       2. деформация (наклон) элемента по горизонтали влево;
       3. масштабирование по вертикали расширяет элемент в 1.2 раза;
       4. сдвиг элемента по горизонтали на 50 пикселей вправо.
       Трансформации применяются одновременно. */
    transform: matrix(1.5, 0, 0.5, 1.2, 50, 0);
}