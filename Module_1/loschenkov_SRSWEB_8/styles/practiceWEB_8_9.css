/* Для всех элементов: */
* {
    /* Сброс внутренних и внешних отступов: */
    padding: 0;
    margin: 0;
    /* Задание гарнитуры шрифта: */
    font-family: sans-serif;
}

body {
    /* Горизонтальное выравнивание текста (или строчных элементов): */
    text-align: center;
}

/* Для того, чтобы изображение занимало всю ширину родителя: */
img {
    /* Тип элемента - блочный: */
    display: block; 
    /* Максимальная ширина элемента равна полной ширине родителя: */
    max-width: 100%;
}

h1 {
    /* Фиксированные внешние отступы сверху и снизу и выравнивание по центру 
       для того, чтобы элемент располагался по середине родителя и не прилипал 
       ни к какому краю: */
    margin: 35px auto;
    /* Горизонтальное выравнивание текста (или строчных элементов): */
    text-align: center;
}

.container__persona {
    /* Установка глубины - расстояния, на которое элемент удаляется от точки 
	   обзора. Свойство определяет перспективу обзора элемента, создавая для 
	   пользователя иллюзию глубины. Чем больше значение, указанное для 
	   перспективы, тем дальше от пользователя расположен элемент. Значение 
	   перспективы устанавливается для вложенных (дочерних) элементов 
	   (находящихся под действием трехмерной трансформации), а не к самому 
	   элементу. */   
    perspective: 1000px;
    /* Ширина элемента: */
    width: 250px;
    /* Высота элемента: */
    height: 300px;
    /* Внешние отступы: */
    margin: 0 15px;
    /* Тип элемента - блочно-строчный. Его внутренняя часть форматируется 
       как блочный элемент, а сам элемент - как строчный: */
    display: inline-block; 
}

.persona {
    /* Позиционирование блока устанавливается относительно 
       его исходного места: */
    position: relative;
    /* Форма курсора, когда он находится в пределах элемента - указатель: */
    cursor: pointer;
    /* Ширина элемента: */
    width: 250px;
    /* Высота элемента: */
    height: 300px;
    /* Промежуток времени, в течение которого должен осуществляться 
       переход, т.е. время, за которое одно значение свойства переходит
       (анимируется) в другое. */
    transition: 1s;
    /* Дочерние элементы будут отображаться в 3D-пространстве: */
    transform-style: preserve-3d;
}

/* Элемент с классом persona, который находится внутри элемента с классом 
   container__persona (вне зависимости от уровня вложенности), над которым
   проходит указатель мыши: */
.container__persona:hover .persona {
    /* Трансформация - поворот элемента на 180 градусов относительно оси y 
       (вертикали): */
    transform: rotateY(180deg);
    /* Таким образом, поворот будет производиться при наведении указателя 
       мыши. */
}

.persona__foto {
    /* Ширина элемента: */
    width: 250px;
    /* Высота элемента: */
    height: 300px;
    /* Если содержимое блочного элемента целиком не помещается в него 
       и выходит за пределы установленной высоты и ширины, то отображается 
       только та область содержимого, которая находится внутри элемента, 
       остальное же будет скрыто: */
    overflow: hidden;
    /* Расположение элемента по оси z. В случае перекрытия элементов, это значение 
       определяет порядок наложения. В данном случае элемент располагается выше 
       всех остальных, т.е. всегда виден пользователю. Если задать этому свойству 
       значение, равное 1 или ниже, то при повороте фотокарточки на обратной её 
       стороне будет показана контактная информация. Это свойство работает только 
       для элементов, у которых значение position задано как absolute, fixed или 
       relative. */
    z-index: 2;
    /* Абсолютное позиционирование блока:
       1. Элемент выпадает из потока. Другие элементы отображаются на веб-странице 
          словно абсолютно позиционированного элемента и нет.
       2. Сжимается под содержимое.
       3. Участвует в «наслаивании».
       4. Гибкая модель позиционирования. Положение элемента задается свойствами 
          left, top, right и bottom.
       5. Свойства задания координат ведут себя по-другому. На положение влияет 
          значение свойства position родительского элемента. Так, если у родителя 
          значение position установлено как static или родителя нет, то отсчет 
          координат ведется от края окна браузера. Если у родителя значение 
          position задано как fixed, relative или absolute, то отсчет координат 
          ведется от края родительского элемента. */
    position: absolute;
    /* Положение элемента. Поскольку у родителя div.persona значение position 
       задано как relative, то отсчет координаты top ведется от верхнего края 
       родительского элемента до верхнего края дочернего элемента: */
    top: 0;
    /* Аналогично, отсчет координаты left ведется от левого края родительского 
       элемента до левого края дочернего элемента: */
    left: 0;
    /* Скрывать заднюю поверхность элемента, которая является зеркальным отражением
       его передней поверхности. Делает элемент невидимым, когда он повёрнут от 
       пользователя, например, при его вращении относительно горизонтальной или 
       вертикальной оси в трёхмерном пространстве. */
    backface-visibility: hidden;
    /* Радиус скругления уголков рамки. Если рамка не задана, 
       то скругление также происходит и с фоном: */
    border-radius: 15px;
}

.persona__info {
    /* Фоновый цвет: */
    background-color: #000;
    /* Ширина элемента: */
    width: 250px;
    /* Высота элемента: */
    height: 300px;
    /* Горизонтальное выравнивание текста (или строчных элементов): */
    text-align: center;
    /* Абсолютное позиционирование блока:
       1. Элемент выпадает из потока. Другие элементы отображаются на веб-странице 
          словно абсолютно позиционированного элемента и нет.
       2. Сжимается под содержимое.
       3. Участвует в «наслаивании».
       4. Гибкая модель позиционирования. Положение элемента задается свойствами 
          left, top, right и bottom.
       5. Свойства задания координат ведут себя по-другому. На положение влияет 
          значение свойства position родительского элемента. Так, если у родителя 
          значение position установлено как static или родителя нет, то отсчет 
          координат ведется от края окна браузера. Если у родителя значение 
          position задано как fixed, relative или absolute, то отсчет координат 
          ведется от края родительского элемента. */
    position: absolute;
    /* Положение элемента. Поскольку у родителя div.persona значение position 
       задано как relative, то отсчет координаты top ведется от верхнего края 
       родительского элемента до верхнего края дочернего элемента: */
    top: 0;
    /* Аналогично, отсчет координаты left ведется от левого края родительского 
       элемента до левого края дочернего элемента: */
    left: 0;
    /* Расположение элемента по оси z. В случае перекрытия элементов, это значение 
       определяет порядок наложения. В данном случае элемент располагается выше 
       всех остальных, кроме элемента с классом persona__foto, у которого порядок
       наложения еще выше (равен 2). Если задать этому свойству значение, равное 2
       или выше, то при повороте фотокарточки на обратной её стороне будет показана
       контактная информация. Это свойство работает только для элементов, у которых 
       значение position задано как absolute, fixed или relative. */
    z-index: 1;
    /* Скрывать заднюю поверхность элемента, которая является зеркальным отражением
       его передней поверхности. Делает элемент невидимым, когда он повёрнут от 
       пользователя, например, при его вращении относительно горизонтальной или 
       вертикальной оси в трёхмерном пространстве. */
    backface-visibility: hidden;
    /* Трансформация - поворот элемента на 180 градусов относительно оси y 
       (вертикали): */
    transform: rotateY(180deg);
    /* Радиус скругления уголков рамки. Если рамка не задана, 
       то скругление также происходит и с фоном: */
    border-radius: 15px;
}

/* Элемент h3, являющийся дочерним непосредственно по отношению к элементу 
   с классом persona__info: */
.persona__info>h3 {
    /* Внутренний отступ сверху: */
    padding-top: 15px;
    /* Цвет текста: */
    color: #f3f3f3;
}

/* Элемент a, являющийся дочерним непосредственно по отношению к элементу 
   с классом persona__info: */
.persona__info>a {
    /* Цвет текста: */
    color: #f3f3f3;
    /* Тип элемента - блочный. Применение этого значения для строчных элементов, 
       например тега <a>, заставляет его вести подобно блокам:
       - происходит принудительный перенос строк в начале и в конце содержимого;
       - элемент воспринимает ширину, высоту, внутренние и внешние отступы;
       - элемент занимает все доступное по ширине пространство;
       - элемент подстраивается под содержимое по высоте. */
    display: block;
    /* Фиксированные внешние отступы сверху и снизу и выравнивание по центру 
       для того, чтобы элемент располагался по середине родителя и не прилипал 
       ни к какому краю: */
    margin: 20px auto;
    /* Отмена всех эффектов оформления текста, в том числе и подчеркивания 
       у ссылок, которое задано по умолчанию: */
    text-decoration: none;
}

/* Элемент i, являющийся дочерним непосредственно по отношению к элементу a, который,
   в свою очередь, является дочерним непосредственно по отношению к элементу 
   с классом persona__info: */
.persona__info>a>i {
    /* Цвет текста: */
    color: #fff;
    /* Размер шрифта: */
    font-size: 32px;
    /* Тип элемента - блочный. Применение этого значения для строчных элементов, 
       например тега <i>, заставляет его вести подобно блокам:
       - происходит принудительный перенос строк в начале и в конце содержимого;
       - элемент воспринимает ширину, высоту, внутренние и внешние отступы;
       - элемент занимает все доступное по ширине пространство;
       - элемент подстраивается под содержимое по высоте. */
    display: block;
    /* Внешний отступ снизу: */
    margin-bottom: 10px;
}