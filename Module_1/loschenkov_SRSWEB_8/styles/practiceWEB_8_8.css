/* Для всех элементов: */
* {    
    /* Сброс внутренних и внешних отступов: */
    padding: 0;
    margin: 0;
}

body {
    /* Установка глубины - расстояния, на которое элемент удаляется от точки 
       обзора. Свойство определяет перспективу обзора элемента, создавая для 
       пользователя иллюзию глубины. Чем больше значение, указанное для 
       перспективы, тем дальше от пользователя расположен элемент. Значение 
       перспективы устанавливается для вложенных (дочерних) элементов 
       (находящихся под действием трехмерной трансформации), а не к самому 
       элементу. */
    perspective: 900px;
    /* Смена точки начала координат для свойства перспективы. Это свойство 
       позволяет менять нижнее положение трехмерных элементов. Отсчёт координат 
       начинается с левого верхнего угла элемента. По аналогии работы свойства 
       perspective, позиционирование перспективы происходит для вложенных 
       (дочерних) элементов, а не самого элемента. В данном случае задана средняя 
       точка по оси x и отрицательное значение по оси y: */
    perspective-origin: center -5em;
}

.container {
    /* Дочерние элементы будут отображаться в 3D-пространстве: */
    transform-style: preserve-3d;
    /* К элементу с классом container применяется анимация, заданная 
       последовательностью ключевых кадров с именем rotate, продолжительностью 
       10 секунд. Она проигрывается равномерно на протяжении всего времени, 
       без колебаний в скорости (linear), без предварительной задержки (0 сек 
       по умолчанию), бесконечное число раз (infinite). Ключевые кадры проиграются 
       в той же последовательности, в которой они были записаны 
       ("animation-direction: normal" по умолчанию). */
    animation: rotate 10s infinite linear;
    /* Тип элемента - блочно-строчный. Его внутренняя часть форматируется 
       как блочный элемент, а сам элемент - как строчный: */
    display: inline-block;
    /* Ширина элемента: */
    width: 200px;
    /* Высота элемента: */
    height: 200px;
    /* Позиционирование блока устанавливается относительно 
       его исходного места: */
    position: relative;
    /* Добавление свойств left и top изменяет позицию элемента 
       и сдвигает его в ту или иную сторону от первоначального 
       расположения: */
    top: 100px;
    left: 250px;
}

/* Ключевые кадры анимации с именем rotate: */
@keyframes rotate {
    /* Каждый ключевой кадр начинается с указания момента от длительности 
       всей анимации и набора CSS-свойств, которые анимируемый элемент 
       должен принять к указанному моменту. В данном случае анимируется 
       объемный поворот элемента на угол 360 градусов относительно вектора 
       направления, задаваемого в координатах x,y,z, т.е. относительно оси y.
       Конечные CSS-свойства анимируемого элемента: */
    100% {
        transform: rotate3d(0, 1, 0, 360deg);
    }
}

/* Элемент div с классом side: */
div.side {
    /* Ширина элемента: */
    width: 200px;
    /* Высота элемента: */
    height: 200px;
    /* Фоновый цвет: */
    background-color: #ccc;
    /* Абсолютное позиционирование блока:
       1. Элемент выпадает из потока. Другие элементы отображаются на веб-странице, 
          словно абсолютно позиционированного элемента и нет.
       2. Сжимается под содержимое.
       3. Участвует в «наслаивании».
       4. Гибкая модель позиционирования. Положение элемента задается свойствами 
          left, top, right и bottom.
       5. Свойства задания координат ведут себя по-другому. На положение влияет 
          значение свойства position родительского элемента. Так, если у родителя 
          значение position установлено как static или родителя нет, то отсчет 
          координат ведется от края окна браузера. Если у родителя значение 
          position задано как fixed, relative или absolute, то отсчет координат 
          ведется от края родительского элемента. */
    position: absolute;
    /* Толщина, стиль (цельный) и цвет внешней границы: */
    outline: 1px solid #000;
    /* Расстояние между границей, созданной с помощью свойства outline, 
       и рамкой элемента, добавленной через border. Положительное значение
       означает, что граница будет отрисовываться снаружи, за рамкой и за
       пределами самого элемента. Это создаёт эффект прозрачных взаимопроникающих
       расширенных граней куба: */
    outline-offset: 25px;
    /* Уровень прозрачности элемента: */
    opacity: 0.8;
}

.front {
    /* Фоновое изображение: */
    background: url("../images/pic6.png");
}

/* Трансформации, заданные ниже, создают куб в трехмерном пространстве: */

.left {
    /* Следующие трансформации применяются последовательно:
       1. сдвиг элемента по горизонтали на 100 пикселей влево;
       2. поворот элемента на 90 градусов относительно оси y (вертикали);
       3. сдвиг элемента по горизонтали на 100 пикселей вправо. */
    transform: translateX(-100px) rotateY(90deg) translateX(100px);
    /* Фоновое изображение: */
    background: url("../images/pic1.png");
}

.right {
    /* Следующие трансформации применяются последовательно:
       1. сдвиг элемента по горизонтали на 100 пикселей вправо;
       2. поворот элемента на 90 градусов относительно оси y (вертикали);
       3. сдвиг элемента по горизонтали на 100 пикселей вправо. */
    transform: translateX(100px) rotateY(90deg) translateX(100px);
    /* Фоновое изображение: */
    background: url("../images/pic2.png");
}

.up {
    /* Следующие трансформации применяются последовательно:
       1. сдвиг элемента по вертикали на 100 пикселей вверх;
       2. поворот элемента на 90 градусов относительно оси x (горизонтали);
       3. сдвиг элемента по вертикали на 100 пикселей вверх. */
    transform: translateY(-100px) rotateX(90deg) translateY(-100px);
    /* Фоновое изображение: */
    background: url("../images/pic3.png");
}

.down {
    /* Следующие трансформации применяются последовательно:
       1. сдвиг элемента по вертикали на 100 пикселей вниз;
       2. поворот элемента на 90 градусов относительно оси x (горизонтали);
       3. сдвиг элемента по вертикали на 100 пикселей вверх. */
    transform: translateY(100px) rotateX(90deg) translateY(-100px);
    /* Фоновое изображение: */
    background: url("../images/pic4.png");
}

.back {
    /* Трансформация - сдвиг элемента по оси z на 200 пикселей назад (вглубь): */
    transform: translateZ(-200px);
    /* Фоновое изображение: */
    background: url("../images/pic5.png");
}