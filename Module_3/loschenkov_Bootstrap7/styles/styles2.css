.flex-container {
   /* Создание контейнера с элементами FlexBox, т.е. все прямые дочерние элементы
      контейнера будут трансформированы в «гибкие» элементы этого контейнера 
      и будут выравниваться в нём по flех-осям.
      К гибким контейнерам и элементам можно применять дополнительные свойства. */
   display: flex;

   /* Задание направления потока и главной оси. Значением по умолчанию является row,
      выстраивающее элементы в ряд точно так же, как и направление текста.
      С помощью значения column можно указать, что элементы выравниваются
      вертикально. Значения row-reverse и column-reverse располагают элементы 
      в указанных направлениях, но начинаются они от конца, и заполнение идет 
      в противоположном направлении.
      Главная ось соответствует направлению потока, заданному для flех-­контейнера.
      Для горизонтально ориентированных языков задание row означает, что главная 
      ось окажется горизонтальной, задание column - что она будет вертикальной.
      Поперечной осью служит любое направление, перпендикулярное главной оси: 
      вертикальное - для row, горизонтальное - для column.
      Итак, главная ось - направление потока, которое указано для flех-контейнера. 
      Поперечная ось перпендикулярна главной оси. 
      Направление, в котором блоки будут располагаться в строку: */
   /* flex-direction: row; */

   /* Выравнивание элементов вдоль главной оси.
      По умолчанию flех-элементы имеют ширину, ограниченную содержащимся в них
      контентом, а это означает, что на главной оси flex-контейнера может 
      оставаться свободное место. Также по умолчанию (justify-content: flех-stаrt)
      элементы следуют друг за другом в направлении слева вправо (это зависит от 
      направления чтения языка страницы и направления главной flех-оси).
      CSS свойство justify-content определяет, как браузер распределяет 
      пространство между и вокруг элементов контента вдоль главной оси flex
      контейнера. Помогает распределить оставшееся свободное место в случае, 
      когда элементы строки не «тянутся», либо тянутся, но уже достигли своего
      максимального размера. Выравнивание выполняется после того, как применяются 
      длины и автоматические поля, что означает, что если во Flexbox разметке есть 
      хотя бы один flex-элемент с flex-grow отличным от 0, то эффект не будет
      применён, потому что не останется свободного места.
      Поскольку свойство justify-content управляет величиной пространства в самом
      контейнере, это свойство применяется к элементу самого flех-контейнера.
      Равномерное распределение всех элементов по ширине flex-блока. Первый 
      элемент вначале, последний в конце: */
   /* justify-content: space-between; */

   /* Свойство CSS flex-wrap задаёт правила вывода flex-элементов - в одну строку 
      или в несколько, с переносом элементов. Если перенос разрешён, то возможно 
      задать направление, в котором будут располагаться новые строки.
      По умолчанию группа элементов не разбивается на дополнительные строки или линии
      (nowrap), значение wrap подключает возможность её разбивки на несколько строк 
      в направлении от начала поперечной оси к ее концу. Например, если задано 
      направление row, то строки располагаются сверху вниз.
      Значение wrap-reverse разбивает группу элементов на несколько строк (линий),
      но располагает их в противоположном направлении: от конца поперечной оси к её 
      началу (то есть снизу вверх). 
      Расположение в одну линию (nowrap) может привести к переполнению контейнера: */
   /* flex-wrap: nowrap; */

   /* Выравнивание элементов вдоль поперечной оси. CSS свойство align-items 
      выравнивает flex-элементы текущей строки таким же образом, как 
      и justify-content, но для поперечной оси (перпендикулярной к основной). 
      Значением по умолчанию является stretch: элементы растягиваются, заполняя 
      контейнер (с учётом min-width/max-width). */
   /* align-items: stretch; */
}

.box {
   /* Внутренние отступы: */
   padding: 0 10px 15px;
   /* Толщина, стиль (цельный) и цвет рамки: */
   border: 1px solid lightgray;

   /* Свойства блоков box, как гибких элементов в контейнере flex-container:
      Первое значение в свойстве flex - CSS свойство flex-grow определяет, сколько 
      пространства может занимать гибкий элемент внутри контейнера, т.е. определяет 
      для flex-элемента возможность «вырастать» при необходимости. Принимает 
      безразмерное значение, служащее в качестве пропорции. Оно определяет, какую 
      долю свободного места внутри контейнера элемент может занять. 
      Если установить значение flex-grow для всех элементов контейнера равным 1, то 
      они получат равную прибавку к своей изначальной ширине, т.е. браузер всё 
      свободное пространство, доступное вдоль главной оси, добавляет в равной степени
      к каждому элементу, растягивая их на одинаковую величину.
      Если указать для элемента более высокое значение свойства flex-grow, то оно 
      подействует как коэффициент, который позволит ему занять внутри контейнера 
      соответственно больше места. Например, если придать элементу значение 
      flex-grow: 2, то ему даётся возможность занять больше места, чем остальным 
      элементам, имеющим значения flex-grow: 1. Но это не означает того, что он будет 
      в два раза больше, чем элемент, у которого flex-grow стоит с параметром 1. 
      Это будет означать то, что он получит в два раза больше пикселей к изначальной 
      ширине, чем другой элемент.
      Т.е. свободное место между гибкими элементами распределяется в соответствии 
      с соотношением, определённым различными коэффициентами flex-grow.
      По умолчанию для свойства flex-grow установлено значение 0, означающее, что 
      элемент не может стать шире, чем размер его контента или указанное для него 
      значение ширины. Поскольку элементы по умолчанию не растягиваются, на них могут 
      оказывать влияние свойства выравнивания. Если же свободного пространства внутри 
      элементов нет, не будет выполняться и выравнивание.
      Если места в строке (линии) недостаточно, есть вероятность, что добавленного 
      к элементам пространства окажется мало и разницу вообще трудно будет заметить. 
      В таком случае следует поиграть со значениями flex-grow и шириной окна браузера.
      На практике flex-grow используется вместе с другими flex-свойствами 
      flex-shrink и flex-basis, и обычно определяется с помощью сокращения flex, 
      чтобы убедиться, что все значения заданы.
      Элементу разрешено растягиваться для заполнения свободного про­странства, */
   flex-grow: 1;

   /* и разрешено сжиматься, становясь уже, чем исходные flex-basis пик­селов: */
   flex-shrink: 1;
   /* Второе значение в свойстве flex - CSS свойство flex-shrink (сжатие элементов)
      применяется, если контейнер недостаточно широк и не может полностью вместить все 
      свои элементы. По сути, свойство flex-shrink удаляет некоторое пространство внутри
      элементов, что приводит к сжатию их до нужного размера в соответствии с заданным
      соотношением. Свойство flex-shrink устанавливает коэффициент сжатия гибкого 
      элемента в контейнере и задаёт, насколько элемент будет уменьшаться по отношению 
      к другим гибким элементам в контейнере, чтобы разместить все элементы в одну
      строку (линию).
      По умолчанию значение свойства flex­shrink установлено равным 1 - то есть, если
      не предпринимать никаких действий, элементы сжимаются в одинаковой пропорции.
      Если свойство flex-shrink установлено в 0, элементам не позволено сжиматься,
      и они могут выступать из своего контейнера и за пределы области просмотра.
      Наконец, как и в случае со свойством flex-grow, более высокое значение выступает
      в роли коэффициента - элемент, имеющий значение свойства flex-shrink, равное 2,
      сжимается вдвое сильнее по сравнению с элементом, имеющим значение, равное 1.
      В общем случае нет никакой надобности указывать значение коэффициента сжатия 
      - достаточно только подключить сжатие (1) или отключить его (0).
      Flех-элементы прекращают сжиматься, как только достигают своего минимального 
      размера (определенного отношением min-width/min-height). По умолчанию (если
      значения min-width/min-height установлены в auto) этот минимум основан на 
      минимальном размере контента (min-content). Можно легко установить его как ноль
      или 12em, или как любое другое значение длины, которое покажется удобным.
      flex-shrink используется вместе с flex-свойствами flex-grow и flex-basis. 
      Обычно определяется с помощью сокращения flex. */

   /* Третье значение в свойстве flex - CSS свойство flex-basis определяет начальный 
      размер элемен­та до его выравнивания, растягивания или сжатия. Это свойство можно 
      применять для flех-элементов вместо свойства width (или свойства height - для 
      столбцов).
      По умолчанию для свойства flex-basis выбирается значение auto - тогда для размера
      элемента применяются задан­ные для него значения свойства width/height. Если 
      свойство для главного раз­мера элемента (width или height) не установлено или 
      установлено как auto (по умолчанию), то свойство flex-basis ориентируется на 
      ширину контента. Задавать точную ширину контента можно также, присвоив свойству 
      flex-basis значение content, однако эта возможность пока еще не имеет 
      удовлетворительной поддержки браузерами.
      Базовый размер гибкого элемента перед распределением пространства в контейнере: */
   flex-basis: 50px;

   /* Свойство flex является сокращением для свойств flex-grow, flex-shrink 
      и flex-basis. Здесь свойство flex-basis для элементов контейнера установлено 
      равным 50 пикселам. При этом элементы могут ужиматься, что позволит им уместиться
      в доступном пространстве (flex-shrink: 1), им также разрешается увеличиваться 
      в ширину (flex-grow: 1) больше, чем на 50 пикселов, чтобы заполнить свободное 
      пространство в контейнере. Сокращенная запись трёх свойств, описанных выше: */
   /* flex: 1 1 50px; */
}

.center-box {
   /* Переопределение свойств блока box с дополнительным классом center-box, как 
      гибкого элемента в контейнере flex-container:
      Элементу разрешено растягиваться для заполнения свободного про­странства, 
      получая при этом в три раза больше пикселей к изначальной ширине, чем 
      остальные элементы, коэффициент flex-grow которых равен единице: */
   flex-grow: 3;
   /* Элементу не разрешено сжиматься, становясь уже, чем исходные flex-basis 
      пик­селов: */
   flex-shrink: 0;

   /* Свойство CSS align-self позволяет переопределить выравнивание вдоль поперечной 
      оси (перпендикулярной к основной), заданное по умолчанию или в align-items,
      для отдельных flex-элементов. В данном случае каждый элемент обрабатывается 
      индивидуально, т.е. свойство применяется к отдельному элементу, а не к самому
      контейнеру. Элемент выравнивается по центру поперечной оси: */
   align-self: center;
}